// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const menuItems = [
    { icon: '‚òï', name: '–≠—Å–ø—Ä–µ—Å—Å–æ', price: 150 },
    { icon: 'ü•õ', name: '–ö–∞–ø—É—á–∏–Ω–æ', price: 200 },
    { icon: 'üçµ', name: '–õ–∞—Ç—Ç–µ', price: 220 },
    { icon: '‚òï', name: '–ê–º–µ—Ä–∏–∫–∞–Ω–æ', price: 180 },
    { icon: 'üç´', name: '–ú–æ–∫–∞—á–∏–Ω–æ', price: 250 }
];

let cart = [];
let total = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram?.WebApp;
if (tg) {
    tg.expand();
    tg.MainButton.setText(`–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (0 ‚ÇΩ)`).show();
    document.body.style.backgroundColor = tg.themeParams.bg_color || '#ffffff';
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
function initMenu() {
    const menuContainer = document.getElementById('menu');
    menuContainer.innerHTML = menuItems.map(item => `
        <div class="menu-item" onclick="addToCart('${item.name}', ${item.price})">
            <div class="item-content">
                <div class="item-icon">${item.icon}</div>
                <h3 class="item-title">${item.name}</h3>
                <p class="item-price">${item.price} ‚ÇΩ</p>
            </div>
        </div>
    `).join('');
}

// –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
function addToCart(name, price) {
    const existing = cart.find(item => item.name === name);
    
    if (existing) {
        existing.quantity++;
    } else {
        cart.push({ name, price, quantity: 1 });
    }
    
    total += price;
    updateCart();
    showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ: ${name}`);
}

function updateCart() {
    const cartContainer = document.getElementById('cart');
    const totalElement = document.getElementById('total');
    
    cartContainer.innerHTML = cart.map(item => `
        <div class="cart-item">
            <span>${item.name}</span>
            <div class="quantity-controls">
                <button class="quantity-btn" onclick="adjustQuantity('${item.name}', -1)">-</button>
                <span>${item.quantity}</span>
                <button class="quantity-btn" onclick="adjustQuantity('${item.name}', 1)">+</button>
            </div>
            <span>${item.price * item.quantity} ‚ÇΩ</span>
        </div>
    `).join('');

    totalElement.textContent = `${cart.reduce((sum, item) => sum + (item.price * item.quantity), 0)} ‚ÇΩ`;
    
    if (tg) {
        tg.MainButton.setText(`–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ (${total} ‚ÇΩ)`);
    }
}

function adjustQuantity(name, delta) {
    const item = cart.find(i => i.name === name);
    if (!item) return;

    item.quantity += delta;
    total += delta * item.price;
    
    if (item.quantity < 1) {
        cart = cart.filter(i => i !== item);
    }
    
    updateCart();
    showNotification(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ: ${name}`);
}

function clearCart() {
    cart = [];
    total = 0;
    updateCart();
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function placeOrder() {
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
        return;
    }

    const loader = document.querySelector('.loader');
    const orderBtn = document.querySelector('.order-btn');
    
    orderBtn.disabled = true;
    loader.style.display = 'block';

    try {
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        if (tg) {
            tg.sendData(JSON.stringify({
                order: cart,
                total: total
            }));
            tg.close();
        } else {
            alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
            clearCart();
        }
    } finally {
        orderBtn.disabled = false;
        loader.style.display = 'none';
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showNotification(text) {
    const notification = document.getElementById('notification');
    notification.textContent = text;
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 2000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initMenu();
updateCart();